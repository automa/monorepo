generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["nativeDistinct", "tracing", "relationJoins", "omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://automa@localhost:5432/automa"
}

model users {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(255)
  email          String           @unique @db.Citext
  created_at     DateTime         @default(now()) @db.Timestamp(6)
  integrations   integrations[]
  task_items     task_items[]
  user_orgs      user_orgs[]
  user_providers user_providers[]
  user_repos     user_repos[]
}

model orgs {
  id                     Int                 @id @default(autoincrement())
  name                   String              @unique @db.Citext
  provider_type          provider
  provider_id            String              @db.VarChar(255)
  provider_name          String              @db.VarChar(255)
  is_user                Boolean             @default(false)
  has_installation       Boolean             @default(false)
  created_at             DateTime            @default(now()) @db.Timestamp(6)
  github_installation_id Int?                @unique
  bot_installations      bot_installations[]
  bots                   bots[]
  integrations           integrations[]
  repos                  repos[]
  tasks                  tasks[]
  user_orgs              user_orgs[]

  @@unique([provider_type, provider_id])
}

model repos {
  id                 Int             @id @default(autoincrement())
  org_id             Int
  name               String          @db.Citext
  provider_id        String          @db.VarChar(255)
  is_private         Boolean         @default(false)
  is_archived        Boolean         @default(false)
  has_installation   Boolean         @default(false)
  created_at         DateTime        @default(now()) @db.Timestamp(6)
  last_commit_synced String?         @db.VarChar(40)
  repo_settings      repo_settings[]
  orgs               orgs            @relation(fields: [org_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user_repos         user_repos[]

  @@unique([org_id, provider_id])
}

model user_providers {
  id             Int      @id @default(autoincrement())
  user_id        Int
  provider_type  provider
  provider_id    String   @db.VarChar(255)
  provider_email String   @db.Citext
  refresh_token  String?  @db.VarChar(255)
  created_at     DateTime @default(now()) @db.Timestamp(6)
  users          users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider_type, provider_id])
  @@unique([user_id, provider_type])
}

model user_orgs {
  id         Int      @id @default(autoincrement())
  user_id    Int
  org_id     Int
  created_at DateTime @default(now()) @db.Timestamp(6)
  orgs       orgs     @relation(fields: [org_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, org_id])
}

model user_repos {
  id         Int      @id @default(autoincrement())
  user_id    Int
  repo_id    Int
  created_at DateTime @default(now()) @db.Timestamp(6)
  repos      repos    @relation(fields: [repo_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, repo_id])
}

model bots {
  id                Int                 @id @default(autoincrement())
  org_id            Int
  name              String              @db.Citext
  type              bot
  webhook_url       String              @db.VarChar(255)
  short_description String              @db.VarChar(255)
  image_url         String?             @db.VarChar(255)
  description       String?
  homepage          String?             @db.VarChar(255)
  published_at      DateTime?           @db.Timestamp(6)
  is_published      Boolean?            @default(dbgenerated("(published_at IS NOT NULL)"))
  created_at        DateTime            @default(now()) @db.Timestamp(6)
  is_preview        Boolean             @default(false)
  is_deterministic  Boolean             @default(false)
  bot_installations bot_installations[]
  orgs              orgs                @relation(fields: [org_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([org_id, name])
  @@index([is_published])
}

model repo_settings {
  id                String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  repo_id           Int
  cause             Int
  commit            String   @db.VarChar(40)
  settings          Json?
  validation_errors Json?
  created_at        DateTime @default(now()) @db.Timestamp(6)
  repos             repos    @relation(fields: [repo_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([repo_id, created_at(sort: Desc)])
}

model bot_installations {
  id         Int      @id @default(autoincrement())
  bot_id     Int
  org_id     Int
  created_at DateTime @default(now()) @db.Timestamp(6)
  bots       bots     @relation(fields: [bot_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  orgs       orgs     @relation(fields: [org_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([bot_id, org_id])
}

model task_items {
  id            Int       @id @default(autoincrement())
  task_id       Int
  type          task_item
  data          Json
  actor_user_id Int?
  created_at    DateTime  @default(now()) @db.Timestamp(6)
  users         users?    @relation(fields: [actor_user_id], references: [id], onUpdate: NoAction)
  tasks         tasks     @relation(fields: [task_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([task_id, created_at])
}

model tasks {
  id           Int          @id @default(autoincrement())
  org_id       Int
  title        String       @db.VarChar(255)
  created_at   DateTime     @default(now()) @db.Timestamp(6)
  completed_at DateTime?    @db.Timestamp(6)
  is_completed Boolean?     @default(dbgenerated("(completed_at IS NOT NULL)"))
  task_items   task_items[]
  orgs         orgs         @relation(fields: [org_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([org_id, created_at(sort: Desc)])
}

model integrations {
  id               Int         @id @default(autoincrement())
  org_id           Int
  integration_type integration
  secrets          Json        @default("{}")
  config           Json        @default("{}")
  created_by       Int
  created_at       DateTime    @default(now()) @db.Timestamp(6)
  users            users       @relation(fields: [created_by], references: [id], onDelete: Cascade, onUpdate: NoAction)
  orgs             orgs        @relation(fields: [org_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([org_id, integration_type])
}

enum provider {
  github
  gitlab
}

enum bot {
  event
  scheduled
}

enum task_item {
  message
  origin
  pull_request
  repo
  bot
}

enum integration {
  github
  linear
  slack
  jira
}
