type Query {
  tasks(org_id: Int!, filter: TasksFilter): [Task!]!
  task(org_id: Int!, id: Int!): Task!
}

type Mutation {
  taskCreate(org_id: Int!, input: TaskCreateInput!): Task!
}

enum TaskState {
  started
  skipped
  submitted
  completed
  cancelled
  failed
}

type Task {
  id: Int!
  title: String!
  is_scheduled: Boolean!
  state: TaskState!
  created_at: DateTime!

  org: Org!

  items: [TaskItem!]!
}

input TasksFilter {
  is_scheduled: Boolean
}

enum TaskActivityType {
  state
}

type TaskActivity {
  id: Int!
  type: TaskActivityType!

  # state
  from_state: TaskState
  to_state: TaskState
}

enum TaskItemType {
  message
  origin
  repo
  bot
  proposal
  activity
}

type TaskItem {
  id: Int!
  type: TaskItemType!
  data: JSON
  created_at: DateTime!

  actor_user: User
  bot: PublicBot
  repo: Repo
  activity: TaskActivity
}

input TaskCreateInput {
  title: String!
  content: String
  bot_installation_id: Int!
  repo_id: Int!
}
