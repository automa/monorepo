name: Deploy Production (api)
on:
  push:
    branches: [production]
    paths:
      - .github/workflows/deploy-production-api.yml
      - packages/prisma/schema.prisma
      - packages/prisma/src/**
      - packages/common/src/**
      - packages/config/schemas/**
      - packages/config/src/**
      - packages/api/src/**
      - pnpm-lock.yaml
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false
jobs:
  deploy-production-api:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install node
        uses: actions/setup-node@v3
        with:
          node-version: 22
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9
      - name: Cache dependencies
        uses: actions/cache@v3
        id: cache
        with:
          path: 'node_modules'
          key: deps-${{ hashFiles('**/pnpm-lock.yaml', '**/schema.prisma') }}
          restore-keys: |
            deps-
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Publish graphql
        env:
          APOLLO_GRAPH_ID: ${{ secrets.PRODUCTION_APOLLO_GRAPH_ID_API }}
          APOLLO_KEY: ${{ secrets.PRODUCTION_APOLLO_KEY_API }}
        run: |
          pnpm graphql-generate
          pnpm graphql-publish
      - name: Login to github container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract docker metadata
        id: docker-meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/automa/api
          tags: |
            type=raw,value=latest
            type=raw,value=0.0.{{date 'YYYYMMDD'}}
      - name: Install depot
        uses: depot/setup-action@v1
      - name: Build and push image
        uses: depot/build-push-action@v1
        with:
          project: ${{ secrets.DEPOT_PROJECT_ID_API }}
          context: .
          file: ./packages/api/Dockerfile
          tags: ${{ steps.docker-meta.outputs.tags }}
          labels: ${{ steps.docker-meta.outputs.labels }}
          push: true
